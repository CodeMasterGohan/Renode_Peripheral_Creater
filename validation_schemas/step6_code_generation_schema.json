{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Step 6: Code Generation Schema",
  "description": "Schema for validating generated Renode peripheral code",
  "type": "object",
  "properties": {
    "peripheral_name": {
      "type": "string",
      "description": "Name of the peripheral"
    },
    "generated_files": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "pattern": "^[A-Za-z0-9_]+\\.cs$",
            "description": "Generated file name"
          },
          "file_type": {
            "type": "string",
            "enum": ["main_peripheral", "register_definitions", "interfaces", "helpers", "tests"],
            "description": "Type of generated file"
          },
          "namespace": {
            "type": "string",
            "description": "C# namespace"
          },
          "imports": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Required using statements"
          },
          "classes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "class_name": {
                  "type": "string",
                  "pattern": "^[A-Z][a-zA-Z0-9]*$"
                },
                "access_modifier": {
                  "type": "string",
                  "enum": ["public", "internal", "private"]
                },
                "is_partial": {
                  "type": "boolean"
                },
                "base_class": {
                  "type": "string"
                },
                "interfaces": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "attributes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Class attributes/decorators"
                },
                "summary": {
                  "type": "string",
                  "description": "XML documentation summary"
                }
              },
              "required": ["class_name", "access_modifier"]
            }
          },
          "enums": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "enum_name": {
                  "type": "string",
                  "pattern": "^[A-Z][a-zA-Z0-9]*$"
                },
                "access_modifier": {
                  "type": "string",
                  "enum": ["public", "internal", "private"]
                },
                "base_type": {
                  "type": "string",
                  "enum": ["byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong"],
                  "description": "Underlying enum type"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": ["integer", "string"]
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": ["name"]
                  }
                }
              },
              "required": ["enum_name", "values"]
            }
          }
        },
        "required": ["filename", "file_type", "namespace"]
      }
    },
    "code_metrics": {
      "type": "object",
      "properties": {
        "total_lines": {
          "type": "integer",
          "description": "Total lines of code generated"
        },
        "total_classes": {
          "type": "integer",
          "description": "Total number of classes"
        },
        "total_methods": {
          "type": "integer",
          "description": "Total number of methods"
        },
        "total_properties": {
          "type": "integer",
          "description": "Total number of properties"
        },
        "register_count": {
          "type": "integer",
          "description": "Number of registers implemented"
        },
        "interrupt_count": {
          "type": "integer",
          "description": "Number of interrupts implemented"
        },
        "complexity_score": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Code complexity score (1-10)"
        }
      }
    },
    "implementation_details": {
      "type": "object",
      "properties": {
        "register_implementation": {
          "type": "object",
          "properties": {
            "register_type": {
              "type": "string",
              "description": "Type of register implementation used"
            },
            "total_registers": {
              "type": "integer"
            },
            "registers_with_callbacks": {
              "type": "integer"
            },
            "custom_field_types": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "interrupt_implementation": {
          "type": "object",
          "properties": {
            "interrupt_pattern": {
              "type": "string",
              "description": "Pattern used for interrupt implementation"
            },
            "total_interrupts": {
              "type": "integer"
            },
            "interrupt_properties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "state_management": {
          "type": "object",
          "properties": {
            "state_pattern": {
              "type": "string",
              "description": "State management pattern used"
            },
            "persistent_state": {
              "type": "boolean"
            },
            "state_variables": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "external_interfaces": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "interface_type": {
                "type": "string",
                "enum": ["GPIO", "Clock", "DMA", "Bus", "Custom"]
              },
              "implementation_pattern": {
                "type": "string"
              },
              "properties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": ["interface_type"]
          }
        }
      }
    },
    "code_patterns": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "pattern_name": {
            "type": "string",
            "description": "Name of the design pattern used"
          },
          "usage_locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string"
                },
                "class": {
                  "type": "string"
                },
                "method": {
                  "type": "string"
                }
              }
            }
          },
          "purpose": {
            "type": "string",
            "description": "Why this pattern was used"
          }
        },
        "required": ["pattern_name", "purpose"]
      }
    },
    "todo_markers": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string"
          },
          "line": {
            "type": "integer"
          },
          "todo_text": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "enum": ["TODO", "FIXME", "HACK", "NOTE"]
          },
          "related_todo_id": {
            "type": "string",
            "description": "Related TODO ID from step 5"
          }
        },
        "required": ["file", "line", "todo_text", "priority"]
      }
    },
    "validation_results": {
      "type": "object",
      "properties": {
        "compilation_ready": {
          "type": "boolean",
          "description": "Whether the code is ready to compile"
        },
        "missing_implementations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of missing implementations"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["missing_documentation", "incomplete_implementation", "potential_bug", "performance"]
              },
              "message": {
                "type": "string"
              },
              "location": {
                "type": "string"
              }
            },
            "required": ["type", "message"]
          }
        }
      }
    },
    "integration_requirements": {
      "type": "object",
      "properties": {
        "renode_version": {
          "type": "string",
          "description": "Minimum Renode version required"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "purpose": {
                "type": "string"
              }
            },
            "required": ["name"]
          }
        },
        "platform_files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "filename": {
                "type": "string",
                "pattern": "\\.(repl|resc)$"
              },
              "purpose": {
                "type": "string"
              },
              "example_content": {
                "type": "string"
              }
            },
            "required": ["filename", "purpose"]
          }
        }
      }
    }
  },
  "required": ["peripheral_name", "generated_files", "code_metrics", "implementation_details"]
}